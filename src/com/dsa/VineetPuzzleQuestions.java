package com.dsa;


import java.util.Arrays;

/*
*
* simple Puzzle
* if we list all the natural numbers below 10 that are multiple of 3 or 5 we get 3,5,6 and 9  The sum of these is multiple  is 23
*
* Find the sum of all the multiples of 3 or 5 below 1000
*
*
* Solution:
* Algorithm/logic --
* we have input of integer for example 10 then we iterate till that number while iterating we will have a if conditon taht we check
* if is divisible by 3 or 5 if yes then store that number and add next time
*
* */
public class VineetPuzzleQuestions {
    public static void main(String[] args) {
        int input= 10;
        int input2= 35;
        int input3 = 6;
        System.out.println(simplePuzzle(input));
        System.out.println(simplePuzzle2(input2));
        System.out.println(simplePuzzle3(input3));
        System.out.println(simplePuzzle4());
    }

    private static int simplePuzzle(int input) {
        int num=0;
        for(int i=1;i<input;i++) {
            if(i%3 == 0 || i%5 == 0) {
                num=num+i;
            }
        }
        return num;
    }
    /*
Each new term in the Fibonacci sequence is generated by adding the previous  two terms. By starting with 1 and 2, the first 10 terms will be:
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
By considering the terms in the Fibonacci sequence whose values do not exceed  four million, find the sum of the even-valued terms.
Answer: 60696 4613732

-------------------
Solution
Alogrithm
-----------------------------
suppose n = 5
we have understand what is the fibonacci series? which like 1 1 2 3 5
here we take first 1 1 then we start our logic by adding a[0]+a[1] then store that result in a[2] then a[1]+1[2]=a[3]
     */
    private static int simplePuzzle2(int input) {
        int a[]=new int[input];
        a[0]=1;
        a[1]=1;
        for(int i=2;i<a.length;i++) {
            a[i]=a[i-1]+a[i-2];
        }
        int num=0;
        for(int i=0;i<a.length;i++){
           // System.out.println(a[i]);
            if(a[i]%2 == 0) {
                num=num+a[i];
            }
        }
        return num;
    }
    /*
    The prime factors of 13195 are 5, 7, 13 and 29. What is the largest prime factor of the number 600851475143 ? Answer: 6857
    Algorithm
    _-------------------------
    first we have to understand what is prime factor of a number like of 23 is 1,23
    prime factors of 35 are 5 and 7 since both these numbers are prime numbers and also factors of 35.

     */
    private static int simplePuzzle3(int input3) {
        int a[]=new int[input3];
        for(int i=0;i<a.length;i++) {
            if(i>0 && input3%i == 0){
                a[i]=i;
            }
        }
        Arrays.sort(a);
        return a[a.length-1];
    }

    /*
    A palindromic number reads the same both ways. The largest palindrome made  from the product of two 2-digit numbers is 9009 = 91 Ã— 99.
Find the largest palindrome made from the product of two 3-digit numbers.
Algorithm
--------------------------------
Palindrom is the unique number which is same read from left to right like 121 , 787, 1221

here we have to find the greatest value so we have to start from 2 digits 10 and iterate each in two for loops to find the combinations
and while iterating we have to check that combination multiplication as palindrome or not if yes that store that combination multiplcation in a variable.

     */
    private static int simplePuzzle4() {

        int greatestValue=0;
        for(int i=10;i<1000;i++){
            for(int j=10;j<1000;j++) {
                if(i*j == reverse(i*j) && i*j > greatestValue){
                    greatestValue = i*j;
                }
            }

        }

        return greatestValue;
    }

    private static int reverse(int n) {
        int m = 0;
        while (n > 0) {
            m = m * 10 + n % 10;
            n = n / 10;
        }
        return m;
    }


}

